
/*
Utility predicates
*/

/*
lst holds when the imput is one of the folowing types of lists
	- list of and;
	- list of or;
	- list of implications;
	- list of nots;
*/

((lst (H | ())))

((lst (L))
	(lst L))
((lst L)
	(and-list L))
((lst L)
	(or-list L))
((lst L )
	(not-list L))
((lst L)
	(imp-list L))

((or-list (H or | T))
	(or-list T))
((or-list (H or T) ))

((and-list (H and | T))
	(and-list T))
((and-list (H and T) ))

((not-list (not | (X|())))
	(lst (X)))
((not-list (not (not | (X|()))))
	(lst (X)))

((imp-list (P imp | T))
	(lst (P))
	(lst T))
((imp-list (not | (T)))
	(imp-list T))

/*
Check the input syntax
The input should be a list of elements separated by and.
Each element should be a list.
*/
((check (H and | T))
	(lst H)
	(check T))
((check (H | ()))
	(lst H))

((check X)
	(pp "Input Syntax Error At")
	(pp X)
	(abort))

((or_and or))
((or_and and))

/*
Transform the implications
(a imp b) becomes ((not a) or b)
*/
((roi ( A imp | B) L)
	(put_not (not (A)) K)
	(roi B C)
	(append K (or| C) L))

((roi (H and | T) L)
	(roi H HH)
	(append (HH) (and) T1)
	(roi T TT)
	(append T1 TT L))

((roi (H or | T) L)
	(roi H HH)
	(append (HH) (or) T1)
	(roi T TT)
	(append T1 TT L))

((roi (H or | (Y)) L)
	(roi ((Y) or | H) L))

((roi (H and | (Y)) L)
	(roi ((Y) and | H) L))

((roi (not | (T)) (not | (X)))
	(roi T X))

((roi X X)
	(negg imp-lst X))


/* 	Sorts the list X based on the length of the 
	elements (non decreasing order of lengths) 
	
	So ( (1) (a b c) (3 2) ) will be sorted as
	( (1) (3 2) (a b c) ) 
*/

((sort X (H | T))
	(member H X)
	(min H X)
	(delete H X XX)
	(sort XX T))

((sort H H))

/* 	
	Finds the minimum of the list. 
	So X will be the minimum of the list (H | T) 
*/
((min X (H | T))
	(length X L1)
	(length H H1)
	(less_eq L1 H1)
	(min X T))

((min X (H|()))
	(length X L1)
	(length H H1)
	(less_eq L1 H1))


((length () 0 )) 
((length (_|T) N) 
         (length T N1) 
         (sum N1 1 N)) 

((reverse () () )) 
((reverse (H|T) R) 
          (reverse T RT)     % contains the reverse of the tail T 
          (append RT (H) R))          % followed by the head T. 

((member H (H|T))) 
((member E (H|T))(member E T)) 

((member1 H (H|T) T)) 
((member1 E (H|T) (H|T1))(member1 E T T1)) 

((s_member1 C1 C2 R1 R2)
	 (member1 (not A) C1 R1) 
      (member1 A C2 R2))
((s_member1 C1 C2 R1 R2)
	 (member1 A C1 R1) 
      (member1 (not A) C2 R2))	

((append () L L)) 
((append (H|T1) T2 (H|T))(append T1 T2 T)) 


((opp and or))
((opp or and))

((insert_not X (T))
	(put_not X T))

((put_not (not (not X)) T)
	         (put_not (X) T))

((put_not (not (H OP | T)) L)
   (or_and OP)
   (opp OP OP1)
   (put_not (not H) HH)
   (append (not) T T1)
   (put_not T1 TT)(append HH (OP1 | TT)  L))

((put_not (not (X)) ((not X))))

((put_not (not X) ((not X))))


((put_not ((not X)) T)
	(put_not (not X) T))

/* Added for lists not starting with "not" word */


((put_not (H OP | T) L)
   (or_and OP)
   %(pp "H" (H))
   (put_not (H) HH)
   %(pp "HH" HH)
   %(pp "T" T)
   (put_not T TT)(append HH (OP | TT)  L))
   %(pp "L" L))

((put_not X X))


((next_to E1 E2 L) 
             (append L1 (E1 E2 | T2) L)) 

((adjacent E1 E2 L) 
                   (next_to E1 E2 L)) 

%((adjacent E1 E2 L) 
%                  (next_to E2 E1 L)) 


/* 
(substitute E1 OLD E2 NEW) holds if NEW is the list OLD in which all occurrences of E1 are substiutes by E2 
*/ 

((substitute _ () _ () )) % substituting anything in the empty list results in the ampty list 

/* 
substituting the element equl to the head of the list by a new element results in a list whose head is equal to the new element
and the tail is obtained by substituting all occurrences of elements equal to the "old head" by the new element 
*/ 

((substitute X Y X Y)
	(negg member X Y))
((substitute H (H|T) H2 (H2 | T2)) 
	(substitute H T H2 T2) 
        (!)) 

((substitute H (H1|T1) H2 (H1|T2)) 
	(substitute H T1 H2 T2))  

((delete ANYEL () () )) 
((delete X (X | L) M)
	(delete X L M))

((delete X ( Y|L1) (Y | L2))
	(delete X L1 L2))

((delete E X X)
	(negg member E X))